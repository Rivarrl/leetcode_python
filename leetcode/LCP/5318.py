# -*- coding: utf-8 -*-
# ======================================
# @File    : 5318.py
# @Time    : 2020/1/19 10:52
# @Author  : Rivarrl
# ======================================
from algorithm_utils import *


class Solution:
    @timeit
    def minTaps(self, n: int, ranges: List[int]) -> int:
        # tanxin
        nxt = [0] * n
        for i in range(n + 1):
            if ranges[i] == 0: continue
            a, b = max(0, i - ranges[i]), min(n, i + ranges[i])
            for j in range(a, b):
                nxt[j] = max(nxt[j], b)
        i = 0
        res = 0
        while i < n:
            if nxt[i] == 0:
                return -1
            i = nxt[i]
            res += 1
        return res

    @timeit
    def minTaps2(self, n: int, ranges: List[int]) -> int:
        # dp
        inf = 0x3f3f3f3f
        dp = [inf] * (n + 1)
        dp[0] = 0
        for i in range(n + 1):
            l, r = max(0, i - ranges[i]), min(n, i + ranges[i])
            for j in range(l, r+1):
                dp[j] = min(dp[j], dp[l] + 1)
        return -1 if dp[-1] == inf else dp[-1]


if __name__ == '__main__':
    a = Solution()
    # a.minTaps(5, [3,4,1,1,0,0])
    # a.minTaps(3, [1,0,0,0])
    # a.minTaps(n = 7, ranges = [1,2,1,0,2,1,0,1])
    # a.minTaps(n = 8, ranges = [4,0,0,0,0,0,0,0,4])
    # a.minTaps(n = 8, ranges = [4,0,0,0,4,0,0,0,4])
    a.minTaps2(35,
              [1, 0, 4, 0, 4, 1, 4, 3, 1, 1, 1, 2, 1, 4, 0, 3, 0, 3, 0, 3, 0, 5, 3, 0, 0, 1, 2, 1, 2, 4, 3, 0, 1, 0, 5,
               2])
    # a.minTaps(68, [0,0,0,1,4,2,2,2,2,4,0,0,0,5,4,0,0,5,3,0,1,1,5,1,1,2,4,1,0,4,3,5,1,0,3,3,4,2,2,4,3,1,1,0,4,0,2,1,4,0,0,3,3,1,1,4,4,2,0,3,4,0,1,5,3,0,1,0,2])
    # a.minTaps(394, [7,8,10,0,12,0,7,2,10,12,11,12,4,2,17,6,6,9,6,17,10,8,8,16,10,11,16,2,16,3,13,10,15,3,10,14,4,15,4,14,5,3,9,14,16,11,7,15,15,4,1,17,5,9,6,15,11,10,0,4,7,12,12,15,17,15,15,17,2,16,7,12,12,7,12,17,17,11,0,9,11,7,10,13,5,13,7,5,16,11,5,15,1,8,10,3,5,16,16,8,9,14,2,10,9,13,11,4,7,4,15,1,13,9,0,4,16,0,11,6,1,3,6,12,9,12,1,7,7,8,14,7,10,13,4,11,13,16,8,0,16,0,2,14,0,2,9,16,6,12,10,0,8,9,17,0,7,11,9,0,15,3,8,15,12,1,2,16,3,15,0,17,11,4,3,0,12,10,0,9,7,3,16,10,5,12,10,14,11,3,17,2,7,5,9,4,12,17,7,9,12,15,3,5,8,2,0,8,12,10,17,1,5,4,11,15,3,13,2,10,15,12,9,3,0,3,4,9,13,7,14,15,10,17,9,7,9,11,1,8,12,7,0,14,8,17,11,5,15,2,5,17,11,12,16,17,5,11,1,15,15,12,0,8,11,2,8,13,15,7,8,0,12,2,12,11,15,3,5,12,10,15,16,17,15,6,8,8,4,15,6,3,16,0,7,17,6,4,10,2,3,3,4,12,5,14,9,3,17,4,8,17,17,12,14,17,5,4,1,1,6,12,7,2,11,17,3,13,1,13,7,9,5,11,1,9,3,2,5,11,5,8,3,13,17,2,3,17,1,14,1,9,7,3,3,11,12,1,16,0,7,4,7,9,14,6,10,6,16,7,9,3,9,8,7,5,12,8,5,15,2,8,2,5,17,9,17,7,8,10,9,17,7,0,10])
